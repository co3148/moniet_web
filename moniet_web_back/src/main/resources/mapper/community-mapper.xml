<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.or.iei.community.model.dao.CommunityDao">

	<!-- 
	<select id="communityList" resultType="community">
		
	SELECT * FROM
	    (SELECT ROWNUM AS RNUM, C.* FROM
	    (SELECT
	        COMMUNITY_NO,
	        COMMUNITY_TITLE,
	        COMMUNITY_SUBTITLE,
	        COMMUNITY_WRITER,
	        MEMBER_ID,
	        COMMUNITY_CONTENT,
	        TO_CHAR(COMMUNITY_DATE, 'YYYY-MM-DD') AS COMMUNITY_DATE,
	        COMMUNITY_THUMB,
	        COMMUNITY_STATUS,
	        COMMUNITY_PARTI
	    FROM COMMUNITY
	    JOIN MEMBER ON (COMMUNITY_WRITER = MEMBER_NO)
	    WHERE COMMUNITY_STATUS = 1
	    ORDER BY 1 DESC)C)
	WHERE RNUM BETWEEN 1 AND 100

	</select>
	 -->
	 
	<select id="communityList" resultMap="getCommunityList">
		SELECT * FROM
		    (SELECT ROWNUM AS RNUM, C.* FROM
		    (SELECT
		        COMMUNITY_NO,
		        COMMUNITY_TITLE,
		        COMMUNITY_SUBTITLE,
		        COMMUNITY_WRITER,
		        MEMBER_NO,
		        MEMBER_ID,
		        MEMBER_EMAIL,
		        COMMUNITY_CONTENT,
		        TO_CHAR(COMMUNITY_DATE, 'YYYY-MM-DD') AS COMMUNITY_DATE,
		        COMMUNITY_THUMB,
		        COMMUNITY_STATUS,
		        COMMUNITY_PARTI,
		        (select count(*) isWish from community_wish where member_no = #{memberNo} and community_no = c.COMMUNITY_NO) IS_WISH
		    FROM COMMUNITY c
		    JOIN MEMBER ON (COMMUNITY_WRITER = MEMBER_NO)
		    WHERE COMMUNITY_STATUS = 1
		    ORDER BY 1 DESC)C)
		WHERE RNUM BETWEEN 1 AND 5
	</select>
	
	<resultMap type="community" id="getCommunityList">
		<result column="community_no" property="communityNo" />
		<result column="community_title" property="communityTitle" />
		<result column="community_subtitle" property="communitySubTitle" />
		<result column="community_writer" property="communityWriter" />
		<result column="member_no" property="memberNo" />
		<result column="member_id" property="memberId" />
		<result column="member_email" property="memberEmail" />
		<result column="community_content" property="communityContent" />
		<result column="community_date" property="communityDate" />
		<result column="community_thumb" property="communityThumb" />
		<result column="community_status" property="communityStatus" />
		<result column="community_parti" property="communityParti" />
		<result column="is_wish" property="isWish" />
		
		<collection 
			property="typeList"
			select="selectOneCommunityType"
			column="community_no"
			javaType="java.util.List"
			ofType="communityType"
		/>
	</resultMap>

	<insert id="insertCommunity">
		insert into community values(community_seq.nextval, #{communityTitle}, #{communitySubTitle}, (select member_no from member where member_id=#{memberId}), #{communityContent}, sysdate, #{communityThumb}, 1, 0)
		<!-- 위 방법이 있고, checkId로해서 select로 번호 받아와서 다시하는 방법도 있음 -->
		<selectKey resultType="int" keyProperty="communityNo" order="AFTER">
			select max(community_no) from community
		</selectKey>
	</insert>
	
	<insert id="insertCommunityType">
		insert into community_type values(COMMUNITY_TYPE_SEQ.NEXTVAL, #{communityNo}, #{communityTypeDiv})
	</insert>
	
	<select id="selectOneCommunity" resultMap="getCommunity">
		SELECT
		    COMMUNITY_NO,
		    COMMUNITY_TITLE,
		    COMMUNITY_SUBTITLE,
		    COMMUNITY_WRITER,
		    MEMBER_NO,
		    MEMBER_ID,
		    MEMBER_EMAIL,
		    COMMUNITY_CONTENT,
		    TO_CHAR(COMMUNITY_DATE, 'YYYY-MM-DD HH:MI') AS COMMUNITY_DATE,
		    COMMUNITY_THUMB,
		    COMMUNITY_STATUS,
		    COMMUNITY_PARTI,
		    (select count(*) isParti from community_parti where member_no = (select member_no from member where member_id = #{memberId}) and community_no = #{communityNo}) IS_PARTI,
		    (select count(*) isWish from community_wish where member_no = (select member_no from member where member_id = #{memberId}) and community_no = #{communityNo}) IS_WISH
		FROM
		    COMMUNITY c
		JOIN
		    MEMBER ON (COMMUNITY_WRITER = MEMBER_NO)
		WHERE
		    COMMUNITY_NO = #{communityNo}
	</select>
	
	<select id="selectOneCommunityType" resultType="communityType">
		SELECT * FROM COMMUNITY_TYPE WHERE COMMUNITY_NO = #{communityNo}
	</select>
	
	<resultMap type="community" id="getCommunity">
		<result column="community_no" property="communityNo" />
		<result column="community_title" property="communityTitle" />
		<result column="community_subtitle" property="communitySubTitle" />
		<result column="community_writer" property="communityWriter" />
		<result column="member_no" property="memberNo" />
		<result column="member_id" property="memberId" />
		<result column="member_email" property="memberEmail" />
		<result column="community_content" property="communityContent" />
		<result column="community_date" property="communityDate" />
		<result column="community_thumb" property="communityThumb" />
		<result column="community_status" property="communityStatus" />
		<result column="community_parti" property="communityParti" />
		<result column="is_parti" property="isParti" />
		<result column="is_wish" property="isWish" />
		
		<collection 
			property="typeList"
			select="selectOneCommunityType"
			column="community_no"
			javaType="java.util.List"
			ofType="communityType"	
		/>
	</resultMap>
	
	<select id="communityBoardList" resultMap="getCommunityBoardList">
	SELECT * FROM
	    (SELECT ROWNUM AS RNUM, C.* FROM
	    (SELECT
	        COMMUNITY_BOARD_NO,
	        COMMUNITY_BOARD_WRITER,
	        MEMBER_ID,
	        COMMUNITY_BOARD_CONTENT,
	        TO_CHAR(COMMUNITY_BOARD_DATE, 'YYYY.MM.DD AM HH"시"MI"분"') AS COMMUNITY_BOARD_DATE,
	        COMMUNITY_REF,
	        COMMUNITY_BOARD_REF,
	        COMMUNITY_BOARD_LIKE,
	        (select count(*) from comu_board_comment where comu_board_ref = cb.COMMUNITY_BOARD_NO) as comu_board_comment_count,
	        (select count(*) isLike from community_board_like where member_no = (select member_no from member where member_id = #{memberId}) and community_board_no = cb.COMMUNITY_BOARD_NO) IS_LIKE
	    FROM COMMUNITY_BOARD cb
	    JOIN MEMBER ON (COMMUNITY_BOARD_WRITER = MEMBER_NO)
	    WHERE COMMUNITY_REF = #{communityNo}
	    ORDER BY 1 DESC)C)
	WHERE RNUM BETWEEN 1 AND 100
	</select>
	
	<select id="communityFileList" resultType="communityBoardFile">
		select * from community_board_file where community_board_no = #{communityBoardNo}
	</select>
	
	<select id="selectOneCommunityBoardType" resultType="communityBoardType">
		<!-- 
		SELECT * FROM COMMUNITY_TYPE WHERE COMMUNITY_NO = #{communityNo}
		 -->
		 select * from community_board_type where community_board_no = #{communityBoardNo}
	</select>
	
	<resultMap type="communityBoard" id="getCommunityBoardList">
		<result column="community_board_no" property="communityBoardNo" />
		<result column="community_board_writer" property="communityBoardWriter" />
		<result column="member_id" property="memberId" />
		<result column="community_board_content" property="communityBoardContent" />
		<result column="community_board_date" property="communityBoardDate" />
		<result column="community_ref" property="communityRef" />
		<result column="community_board_ref" property="communityBoardRef" />
		<result column="community_board_like" property="communityBoardLike" />
		<result column="comu_board_comment_count" property="comuBoardCommentCount" />
		<result column="is_like" property="isLike" />
		
		<collection 
			property="communityBoardTypeList"
			select="selectOneCommunityBoardType"
			column="community_board_no"
			javaType="java.util.List"
			ofType="communityBoardType"
		/>
		
		<collection 
			property="fileList"
			select="communityFileList"
			column="community_board_no"
			javaType="java.util.List"
			ofType="communityBoardFile"
		/>
		
	</resultMap>
	
	<insert id="insertBoard">
		insert into community_board values
		(COMMUNITY_BOARD_SEQ.NEXTVAL, #{communityBoardWriter}, #{communityBoardContent}, sysdate, #{communityRef}, null, 0)
		<selectKey resultType="int" keyProperty="communityBoardNo" order="AFTER">
			select max(community_board_no) from community_board
		</selectKey>
	</insert>
	
	<insert id="insertBoardFile">
		insert into community_board_file values(COMMUNITY_BOARD_FILE_SEQ.nextval, #{communityBoardNo}, #{filename}, #{filepath})
	</insert>
	
	<insert id="insertCommunityBoardType">
		insert into community_board_type values(COMMUNITY_BOARD_TYPE_SEQ.NEXTVAL, #{communityBoardNo}, #{communityBoardTypeDiv})
	</insert>
	
	<select id="boardCommentList" resultType="comuBoardComment">
		select
			comu_board_comment_no,
			comu_board_comment_writer,
			member_id,
			comu_board_comment_content,
			TO_CHAR(comu_board_comment_date, 'YYYY.MM.DD AM HH"시"MI"분"') AS comu_board_comment_date,
			comu_board_ref,
			comu_board_comment_ref
		from COMU_BOARD_COMMENT
		join member on (comu_board_comment_writer = member_no)
		where comu_board_ref =#{communityBoardNo} and comu_board_comment_ref is null
		order by 1
		
	</select>

	<insert id="insertBoardComment">
		insert into COMU_BOARD_COMMENT values
		(COMU_BOARD_COMMENT_SEQ.NEXTVAL, #{comuBoardCommentWriter}, #{comuBoardCommentContent}, sysdate, #{comuBoardRef},
		<if test = 'comuBoardCommentRef == 0'>
			null
		</if>
		<if test = 'comuBoardCommentRef > 0'>
			#{comuBoardCommentRef}			
		</if>
		)
	</insert>

	<select id="recommentList" resultType="comuBoardComment">
		select
			comu_board_comment_no,
			comu_board_comment_writer,
			member_id,
			comu_board_comment_content,
			TO_CHAR(comu_board_comment_date, 'YYYY.MM.DD AM HH"시"MI"분"') AS comu_board_comment_date,
			comu_board_ref,
			comu_board_comment_ref
		from COMU_BOARD_COMMENT
		join member on (comu_board_comment_writer = member_no)
		where comu_board_ref = #{comuBoardRef} and comu_board_comment_ref = #{comuBoardCommentRef} and comu_board_comment_ref is not null
		order by 1
	</select>
	
	<insert id="boardlike">
		<!-- insert into community_board_like values (#{}, #{})  -->
	</insert>
	
	<delete id="removeComment">
		delete from comu_board_comment where comu_board_comment_no = #{comuBoardCommentNo}
	</delete>
	
	<select id="selectBoardFileList">
		select * from community_board_file where community_board_no = #{communityBoardNo}
	</select>
	
	<select id="selectBoardTypeList">
		select * from community_board_type where community_board_no = #{communityBoardNo}
	</select>
	
	<delete id="deleteBoard">
		delete from community_board where community_board_no = #{communityBoardNo}
	</delete>
	
	<insert id="insertCommunityLike">
		insert into community_wish values (community_wish_seq.nextval ,#{communityNo}, #{memberNo})
	</insert>
	
	<delete id="removeCommunityLike">
		delete community_wish where community_no = #{communityNo}
	</delete>

	<insert id="insertBoardLike">
		insert into COMMUNITY_BOARD_LIKE values (#{communityBoardNo}, #{memberNo})
	</insert>

	<delete id="removeBoardLike">
		delete COMMUNITY_BOARD_LIKE where community_board_no = #{communityBoardNo}
	</delete>

	<update id="updateLikeCount">
		UPDATE COMMUNITY_BOARD SET COMMUNITY_BOARD_LIKE = COMMUNITY_BOARD_LIKE+1 WHERE COMMUNITY_BOARD_NO = #{communityBoardNo}
	</update>
	
	<update id="downLikeCount">
		UPDATE COMMUNITY_BOARD SET COMMUNITY_BOARD_LIKE = COMMUNITY_BOARD_LIKE-1 WHERE COMMUNITY_BOARD_NO = #{communityBoardNo}
	</update>

	<delete id="deleteCommunity">
		delete community where community_no = #{communityNo}
	</delete>




	<!-- 관리자 -->
	<select id="allCommunityList" resultType="community">
	SELECT * FROM
		    (SELECT ROWNUM AS RNUM, C.* FROM
		    (SELECT
		        COMMUNITY_NO,
		        COMMUNITY_TITLE,
		        COMMUNITY_THUMB,
		        COMMUNITY_WRITER,
		        MEMBER_ID,
		        COMMUNITY_PARTI,
		        TO_CHAR(COMMUNITY_DATE, 'YYYY-MM-DD') AS COMMUNITY_DATE
		    FROM COMMUNITY
		    JOIN MEMBER ON (COMMUNITY_WRITER = MEMBER_NO)
		    ORDER BY 1 DESC)C)
		WHERE RNUM BETWEEN #{start} AND #{end}
	</select>
	
	<delete id="deleteCommunityType">
		delete community_type where community_no = #{communityNo}
	</delete>
	
	<insert id="modifyCommunityType">
		insert into community_type values(COMMUNITY_TYPE_SEQ.NEXTVAL, #{communityNo}, #{communityTypeDiv})
	</insert>
	
	<update id="modifyCommunity">
		update community
    		set community_title = #{communityTitle},
	        community_subtitle = #{communitySubTitle},
	        community_content = #{communityContent},
	        community_thumb = #{communityThumb}
    	where community_no = #{communityNo}
	</update>
	
	<insert id="insertParti">
		insert into community_parti values (community_parti_seq.nextval, #{communityNo}, #{memberNo})
	</insert>
	
	<update id="updatePartiCount">
		update community set community_parti = community_parti+1 where community_no = #{communityNo}
	</update>
	
	<delete id="outParti">
		delete community_parti where community_no = #{communityNo} and member_no = #{memberNo}
	</delete>
	
	<update id="downPartiCount">
		update community set community_parti = community_parti-1 where community_no = #{communityNo}
	</update>
	
	<select id="totalCount" resultType="int">
		select count(*) from community
	</select>
</mapper>
